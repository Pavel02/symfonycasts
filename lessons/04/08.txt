OrderBy & fetch EXTRA_LAZY

Сейчас уже каждая статья имеет динамические комментарии внизу, но пока что в случайном порядке.
 Нужно новые выше старых.

В шаблоне сейчас, мы просто распечатываем статью.
        {% for comment in article.comments %}
 Которая просто   getComments() в Article.
             /**
                 * @return Collection|Comment[]
                 */
                public function getComments(): Collection
                {
                    return $this->comments;
                }
 Отлично, что это легко, но нет контроля над этим.



***  @ORM\OrderBy() ***

 Сейчас в классе   /src/Entity/Article.php  имеется приватное свойтво
                /**
                 * @ORM\OneToMany(targetEntity="App\Entity\Comment", mappedBy="article")
                 */
                private $comments;

 Добавим к нему новую аннотацию
                @ORM\OrderBy({"createdAt" = "DESC"})



*** Fetch EXTRA_LAZY ***

    у нас есть главная страница, и хотим выводить кол-во комментариев к статьям.
     Для этого добавим в шаблон
                <small>({{ article.comments|length }} comments)</small>

    Это будет отлично, работать, но проблема, что будут вытаскиваться все статьи только для того, чтобы их пересчитать.
     Это поведение Doctrine по умолчанию, доставать все данные при вызове        getComments()   даже если нужно просто их количество.

    Чтобы контролировать это в классе    /src/Entity/Article.php   для аннотации свойства добавим  fetch="EXTRA_LAZY"

                        /**
                         * @ORM\OneToMany(targetEntity="App\Entity\Comment", mappedBy="article", fetch="EXTRA_LAZY")
                         * @ORM\OrderBy({"createdAt" = "DESC"})
                         */
                        private $comments;

     Кол-во запросов будет тоже, но это уже будут быстрые запросы к БД     count()   все это благодаря   fetch="EXTRA_LAZY"

     Но есть ньюанс, что теперь на странице со статьей, у нас появляется дополнительный запрос, который
      вначале подсчитывает кол-во комментариев, а следующим запросом уже запрашивает эти комментарии.

    До использования fetch="EXTRA_LAZY"  этого запроса с  COUNT не было.


    Вначале делаем деплой, выявляем проблемы производительности, а затем решаем их.







The 4 (2?) Possible Relation Types

Когда использовали  make:entity,  то нам вывелось, что есть 4 типа отношений:
  ManyToOne, OneToMany, ManyToMany and OneToOne


например коммент к статьям это  ManyToOne
        /**
             * @ORM\ManyToOne(targetEntity="App\Entity\Article", inversedBy="comments")
             * @ORM\JoinColumn(nullable=false)
             */
            private $article;

Но это же отношение  OneToMany  если смотреть от Статьи к Комментариям.



*** OneToOne: The Cousin of ManyToOne ***

ManyToMany   есть Статья и у нее может быть много Тегов. Но и у одного Тега будет много Статей.



***  Building the Tag Entity ****

Создадим сущность Тег с 2 полями (будет интерактив)
                php bin/console make:entity Tag

                 created: src/Entity/Tag.php
                 created: src/Repository/TagRepository.php

                 Entity generated! Now let's add some fields!
                 You can always add more fields later manually or by re-running this command.

                 New property name (press <return> to stop adding fields):
                 > name

                 Field type (enter ? to see all types) [string]:
                 >

                 Field length [255]:
                 >

                 Can this field be null in the database (nullable) (yes/no) [no]:
                 >

                 updated: src/Entity/Tag.php

                 Add another property? Enter the property name (or press <return> to stop adding fields):
                 > slug

                 Field type (enter ? to see all types) [string]:
                 >

                 Field length [255]:
                 >

                 Can this field be null in the database (nullable) (yes/no) [no]:
                 >

                 updated: src/Entity/Tag.php

                 Add another property? Enter the property name (or press <return> to stop adding fields):
                 >



                  Success!


                 Next: When you're ready, create a migration with make:migration


У нас создастся файл    /src/Entity/Tag.php
  Немного доработаем его:
   В самом верху добавим трейт
                use TimestampableEntity;

  А также, чтобы как и в Article  slug  генерился автоматически добавим
    * @Gedmo\Slug(fields={"name"})     и  добавим    uniq.  А наверху при подкллючениие
      простарнства имен
                use Gedmo\Mapping\Annotation as Gedmo;


                /**
                 * @ORM\Column(type="string", length=255, unique=true)
                 * @Gedmo\Slug(fields={"name"})
                 */
                private $slug;


Теперь создаем Миграцию:
            php bin/console make:migration

и применяем миграции
            php bin/console doctrine:migrations:migrate



Нужно заполнить фейковыми данными таблицу. Для этого создадим фикстуры
                    php bin/console make:fixtures

                     The class name of the fixtures to create (e.g. AppFixtures):
                     > TagFixture

                     created: src/DataFixtures/TagFixture.php


                      Success!


                     Next: Open your new fixtures class and start customizing it.
                     Load your fixtures by running: php bin/console doctrine:fixtures:load
                     Docs: https://symfony.com/doc/master/bundles/DoctrineFixturesBundle/index.html


Немного подредактируем класс фикстур для тегов
                    <?php

                    namespace App\DataFixtures;

                    use App\Entity\Tag;
                    use Doctrine\Common\Persistence\ObjectManager;

                    class TagFixture extends BaseFixture
                    {
                        protected function loadData(ObjectManager $manager)
                        {
                            $this->createMany(Tag::class, 10, function (Tag $tag) {
                                $tag->setName($this->faker->realText(20));
                            });

                            $manager->flush();
                        }
                    }


И применим их командой
                php bin/console doctrine:fixtures:load

                 Careful, database "symfony4_space_bar" will be purged. Do you want to continue? (yes/no) [no]:
                 > y

                   > purging database
                   > loading App\DataFixtures\ArticleFixtures
                   > loading App\DataFixtures\TagFixture
                   > loading App\DataFixtures\CommentFixture



Saving a ManyToMan Relation + Join

В  17.txt  выянили, что ManyToMan Relation  работает с помощью дополнительной присоединенной таблицы.

Как вставить новые данные ?
Как связать Теги со статьями?

Ответ такой же как и при ManyToOne отношении.

В файл  src/DataFixtures/BaseFixture.php  напишем новую функцию
                protected function getRandomReferences(string $className, int $count)
                {
                    $references = [];
                    while (count($references) < $count) {
                        $references[] = $this->getRandomReference($className);
                    }
                    return $references;
                }

Метод $this->getRandomReference($className)  уже ранее был нами написан в этом классе.


Файл src/DataFixtures/ArticleFixture.php   этот класс делаем implements DependentFixtureInterface

  А внизу класса нажимаем  Alt + Insert -> implement method   public function getDependencies()

                public function getDependencies()
                {
                    return [
                        TagFixture::class,
                    ];
                }



В ArticleFixtures  можем создать эти объекты
                 $tags = $this->getRandomReferences(Tag::class, $this->faker->numberBetween(0, 5));

Можно посмотреть содержимое.
          0 => Proxies\__CG__\App\Entity\Tag {#689
            +__isInitialized__: false
            -id: 76
            -name: null
            -slug: null
            -articles: null
            #createdAt: null
            #updatedAt: null
             …2
          }
          1 => Proxies\__CG__\App\Entity\Tag {#721
            +__isInitialized__: false
            -id: 72
            -name: null
            -slug: null
            -articles: null
            #createdAt: null
            #updatedAt: null
             …2
          }

*** Explaining Proxies ***
 Proxies\__CG__\  это спец класс, который Доктрина иногда генерирует и обертывает наши сущности.
   Сделано это, чтобы Доктрина могла  делать  так называемую  "ленивую "  загрузку.

  Также свойства этих объектов выставлены в  null.  Но когда к ним будет обращение, то Доктрина
   заполнит их (ленивая загрузка).

 И выставляем теги для статей
                        foreach ($tags as $tag) {
                            $article->addTag($tag);
                        }


Проверим БД
            php bin/console doctrine:query:sql 'SELECT * FROM tag'
 получим 10 тегов и их name, slug и т.д.

 проверим таблицу где хранятся связи.
        php bin/console doctrine:query:sql 'SELECT * FROM article_tag'


 Каждый раз когда добавляется Тег к Статье, то Доктрина делает запись в эту таблицу.

  Когда делаем  $article->removeTag()   и  flush,  то фактически удаляется строка в этой таблице.
 Об этой таблице вообще не задумываемся. Доктрина вставляет и удаляет сама.


*** Rendering the Tags ***

В файл шаблона /templates/article/show.html.twig   вставляем под блоком где сердце с лайками.
                <span class="pl-2 article-details">
                    {% for tag in article.tags %}
                        <span class="badge badge-secondary">{{ tag.name }}</span>
                    {% endfor %}
                </span>

Для вывода тегов к статьям на главной добавим например:
                                        {% for tag in article.tags %}
                                            <small>
                                                <span class="badge badge-light">{{ tag.name }}</span>
                                            </small>
                                        {% endfor %}


Все будет работать, но ньанс, что количество запросов к БД увеличилось.
 Нужно добавить JOIN для ManyToMany.


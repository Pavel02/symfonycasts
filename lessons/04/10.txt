Collection Magic with Criteria

 На прошлом шаге 9 был способ который конечно работал,
  но ЗАБИРАЛ все комменты из таблицы, что конечно неверно.


*** Hello Criteria ***

 Вместо циклического перебора всех данных, добавим Критерии

 Объект Criteria подобна QueryBuilder
  можем добавлять  ->andWhere()  но внутрь вместо строки передаем  Criteria::expr()
   и сохраним нужную сортировку.

                    $criteria = Criteria::create()
                        ->andWhere(Criteria::expr()->eq('isDeleted', false))
                        ->orderBy(['createdAt' => 'DESC'])
                    ;

  Создание объекта Критерия еще не производит никаких запросов.

                    return $this->comments->matching($criteria);
  При этом $this->comments    это не массив, а возвращаемый тип это интерфейс Доктрины,
   и наше свойство всегда будет каким-либо объектом, реализующим этот интерфейс.
                            /**
                             * @return Collection|Comment[]
                             */
                            public function getComments(): Collection
                            {
                                return $this->comments;
                            }
 Свойство $comments  будет выглядеть и вести себя как массив, но
  это объект, имеющий некоторые вспомогательные методы.


*** The Super-Intelligent Criteria Queries ***

 С помощью Критериев мы имее супер фильтрацию, но это не всегда необходимо.

*** Organizing the Criteria into the Repository ***

 Не хорошо, что логика запросов в сущности Article.

 в файле  /src/Repository/ArticleRepository.php  создадим новый метод и перенесем в него логику из   Article.php
                            public static function createNonDeletedCriteria(): Criteria
                            {
                                return Criteria::create()
                                    ->andWhere(Criteria::expr()->eq('isDeleted', false))
                                    ->orderBy(['createdAt' => 'DESC'])
                                ;
                            }
 Это единственные статические методы, которые должны быть в репозитории.
  Он статический, потому что нам нужно его использовать в Article,
   а классы сущностей не имеют доступа к услугам.

  Теперь в Article метод примет вид.
                        public function getNonDeletedComments(): Collection
                        {
                            $criteria = CommentRepository::createNonDeletedCriteria();
                            return $this->comments->matching($criteria);
                        }

  Можно было бы добавить этот метод и CommentRepository, зачастую когда идет работа со связанными сущностями,
   то не всегда ясно какой именно класс Репозитория должен содержать некоторую логику.
  но если что всегда можно перенести код позже



*** Using the Criteria in a QueryBuilder ***
 Можно переиспользовать этот статический метод в других.

*** Updating the Homepage ***





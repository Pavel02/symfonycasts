Config Parameters

Контейнер это простая концепция:  это объект, который содержит все Сервисы приложения.
 Также контейнер может содержать значения конфигов, они называются параметры и они удобные.

Есть файл     /config/packages/framework.yaml   в нем мы устанваливали  Кэш для приложения
                                  cache:
                                      app: cache.adapter.apcu
 а для окружения   dev  значение устанавливали другое в файле       /config/packages/dev/framework.yaml
                                    framework:
                                        cache:
                                            app: cache.adapter.filesystem

Удобнее это будет задавать с помощью параметров.
 Создадим в файле     /config/packages/framework.yaml
                                    parameters:
                                        cache_adapter: cache.adapter.apcu
 Теперь, чтобы использовать созданный параметр в этом же файле за место жесткого задания, укажем, что теперь это значение параметра
                                            # APCu (not recommended with heavy random-write workloads as memory fragmentation can cause perf issues)
                                            app: '%cache_adapter%'
  Всякий раз как Symfony будет встречать строки со знаками процентов, то будет заменять их значением параметра.

  Ну а в файле    /config/packages/dev/rfamework.yaml   раньше было
            framework:
              cache:
                app: cache.adapter.filesystem
    но теперь старое удалим и для    dev   окружения переназначим   значения параметра.
            parameters:
              cache_adapter: cache.adapter.filesystem




Так будет работать корректно. для  dev  будет кэш  cache.adapter.filesystem   а для остального окружения    cache.adapter.apcu

В любом конфиг файле можно объявлять параметры, но для хорошей организации кода нужно их объявлять в одном месте.
 Будем это делать в файле      config/services.yaml
 Уберем параметр из основного конфиг файла    /config/packages/framework.yaml    и  объявим его в    /config/services.yaml
                                # Put parameters here that don't need to change on each machine where the app is deployed
                                # https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
                                parameters:
                                    cache_adapter: cache.adapter.apcu

Вот только работать будет не совсем так, как мы ожидали.  кеширование даже для  dev  окружения станет     cache.adapter.apcu
 Это происходит потому что есть порядок загрузки файлов.
    вначале файлы из      /config/packages
    далее файлы из         /config/packages/dev
    и последним           /config/services.yaml
т.е. конфигурация из   /config/services.yaml   переопределит предыдущие.


Чтобы пофиксить проблему создадим файл    /config/services_dev.yaml     и в нем укажем
                    parameters:
                      cache_adapter: cache.adapter.filesystem
 а файл   /config/packages/dev/framework.yaml   удалим.
И все будет корректно работать.


т.е. в файле   /config/packages/framework.yaml   мы указали, что кеширование  зависит от значения переменной
          cache:
            app: '%cache_adapter%'
а в файлах   /config/services.yaml     и   /config/services_dev.yaml   мы задаем для разного окружения   значение этого параметра.

конфиг файл  /config/packages/framework.yaml    загружается первым из 3-х  и там еще значение параметра не установлено (оно примет значение при загрузке последующих файлов).


***Использование параметра в Сервисах***
Можно использовать заданные параметры в php-коде приложения.

Для примера: Мы хотим полностью отключить кэширование, когда мы в среде разработки.
 Добавим параметр $isDebug в конструктор класса MarkdownHelper  и в теле конструктора инициализируем
             public function __construct(AdapterInterface $cache, MarkdownInterface $markdown, LoggerInterface $markdownLogger, bool $isDebug)

 Далее в методе   parse()   класса MarkdownHelper  мы укажем, что если режим   dev , то возвращаем без кэширования
                                    // skip caching entirely in debug
                                    if ($this->isDebug) {
                                        return $this->markdown->transform($source);
                                    }
 В конструкторе этого класса $isDebug  не является Сервисом и Symfony  не сможет автоматически определить его значение.
 Для этого в конфиг файле /config/servies.yaml   определим глобальную переменную.
                    # setup special, global autowiring rules
                    bind:
                        $markdownLogger: '@monolog.logger.markdown'
                        $isDebug: true

Но как-то не очень хорошо, так жестко хардкодить ее значение в коде.
  В Symfony уже имеются параметры, которые можно использовать, чтобы посмотреть их выполним
                                     bin/console debug:container --parameters
Получим такой вывод

Symfony Container Parameters
============================

 ------------------------------------------------ -----------------------------------------------------------------------------
  Parameter                                        Value
 ------------------------------------------------ -----------------------------------------------------------------------------
  asset.request_context.base_path
  asset.request_context.secure                     false
  cache_adapter                                    cache.adapter.filesystem
  console.command.ids                              []
  container.autowiring.strict_mode                 true
  container.dumper.inline_class_loader             true
  data_collector.templates                         {"data_collector.request":["request","@WebProfiler\/Collecto...
  debug.container.dump                             /var/www/my-repo/the_spacebar/var/cache/dev/srcDevDebugProjectContainer.xml
  debug.error_handler.throw_at                     -1
  debug.file_link_format                           null
  env(VAR_DUMPER_SERVER)                           127.0.0.1:9912
  fragment.path                                    /_fragment
  fragment.renderer.hinclude.global_template
  kernel.bundles                                   {"FrameworkBundle":"Symfony\\Bundle\\FrameworkBundle\\Framew...
  kernel.bundles_metadata                          {"FrameworkBundle":{"path":"\/var\/www\/my-repo\/the_spaceba...
  kernel.cache_dir                                 /var/www/my-repo/the_spacebar/var/cache/dev
  kernel.charset                                   UTF-8
  kernel.container_class                           srcDevDebugProjectContainer
  kernel.debug                                     true
  kernel.default_locale                            en
  kernel.environment                               dev
  kernel.http_method_override                      true
  kernel.logs_dir                                  /var/www/my-repo/the_spacebar/var/log
  kernel.name                                      src
  kernel.project_dir                               /var/www/my-repo/the_spacebar
  kernel.root_dir                                  /var/www/my-repo/the_spacebar/src
  kernel.secret                                    %env(APP_SECRET)%
  kernel.trusted_hosts                             []
  monolog.handlers_to_channels                     {"monolog.handler.console":{"type":"exclusive","elements":["...
  monolog.swift_mailer.handlers                    []
  monolog.use_microseconds                         true
  profiler.storage.dsn                             file:/var/www/my-repo/the_spacebar/var/cache/dev/profiler
  profiler_listener.only_exceptions                false
  profiler_listener.only_master_requests           false
  request_listener.http_port                       80
  request_listener.https_port                      443
  router.cache_class_prefix                        srcDevDebugProjectContainer
  router.request_context.base_url
  router.request_context.host                      localhost
  router.request_context.scheme                    http
  router.resource                                  kernel::loadRoutes
  session.metadata.storage_key                     _sf2_meta
  session.metadata.update_threshold                0
  session.save_path                                /var/www/my-repo/the_spacebar/var/cache/dev/sessions
  session.storage.options                          {"cache_limiter":0,"cookie_httponly":true,"gc_probability":1...
  templating.helper.code.file_link_format          null
  twig.default_path                                /var/www/my-repo/the_spacebar/templates
  twig.exception_listener.controller               twig.controller.exception::showAction
  twig.form.resources                              ["form_div_layout.html.twig"]
  web_profiler.debug_toolbar.intercept_redirects   false
  web_profiler.debug_toolbar.mode                  2
 ------------------------------------------------ -----------------------------------------------------------------------------


Здесь много полезных параметров, например параметры ядра     kernel.****
Воспользуемся    kernel.debug     этот параметр всегда  true,  и только в среде   production   будет  false.

Тогда в конфиг файле /config/servisec.yaml   фрагмент кода
                                            bind:
                                                $markdownLogger: '@monolog.logger.markdown'
                                                $isDebug: '%kernel.debug%'


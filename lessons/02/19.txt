Fun with Commands

Есть загатовка для консольной команды     src/Command/ArticleStatsCommand.php
 В методе configure   можем установить  description
            ->setDescription('Returns some article stats!')

 Консольные команды могут иметь аргументы (предаются строковыми значениями после команды)
  и иметь опции которые идут следом и имеют префикс  --
                php bin/console article:stats arg1 arg2 --option1 --opt2=khan
  Добавим для консольной команды аргумент и опцию
                 protected function configure()
                    {
                        $this
                            ->setDescription('Returns some article stats!')
                            ->addArgument('slug', InputArgument::REQUIRED, 'The article\'s slug')
                            ->addOption('format', null, InputOption::VALUE_REQUIRED, 'The output format', 'text')
                        ;
                    }

Если выпоним команду, чтобы узнать подробней о консольной команде
            php bin/console article:stats --help

 , то в выводе будут присутствовать, заданные ранее,   аргумент и опция
                    Description:
                      Returns some article stats!

                    Usage:
                      article:stats [options] [--] <slug>

                    Arguments:
                      slug                  The article's slug

                    Options:
                          --format=FORMAT   The output format [default: "text"]
                      -h, --help            Display this help message

*** Customizing our Command ***
 Все действия задаем в методе  execute()
  Получим в нем переданный в консоли аргумент
            $slug = $input->getArgument('slug');
 Идея этой консольной команды возвращать нам сведения о статье. Здесь для показательного примера, будем эти сведения генерить сами
        $data = [
            'slug' => $slug,
            'hearts' => rand(10, 100),
        ];



*** Printing Things ***
Метод  execute()  имеет 2 аргумента $input, $output
  $input  позволяет получать переданные в консоли аргументы и опции, а также
   задавать вопросы в интерактивном режиме.
  $output выводит результаты в консоль на печать.

Чтобы было проще с ними взаимодействовать  имеется объект  SymfonyStyle
                $io = new SymfonyStyle($input, $output);
 Например для распечатки массива можно использовать метод
            $io->listing($data);
 А для вывода  JSON
        $io->write(json_encode($data));

 т.е. пример метода execute()

            protected function execute(InputInterface $input, OutputInterface $output)
            {
                $io = new SymfonyStyle($input, $output);
                $slug = $input->getArgument('slug');

                $data = [
                    'slug' => $slug,
                    'hearts' => rand(10, 100),
                ];

                switch ($input->getOption('format')) {
                    case 'text':
                        $io->listing($data);
                        break;
                    case 'json':
                        $io->write(json_encode($data));
                        break;
                    default:
                        throw new \Exception('What kind of crazy format is that!?');
                }
            }

 Через консоль можно потестить 2 команды:
            php bin/console article:stats khaaaaaan
            php bin/console article:stats khaaaaaan --format=json




*** Printing a Table ***
  Метод    $io->listing($data);  не очень информативен, просто распечатывает значения без ключей.
   можно использовать метод $io->table
                            case 'text':
                                $rows = [];
                                foreach ($data as $key => $val) {
                                    $rows[] = [$key, $val];
                                }
                                $io->table(['Key', 'Value'], $rows);
                                break;
 Если выполнить команду
            php bin/console article:stats khaaaaaan
  , то теперь нагляднее
             -------- ----------
              Key      Value
             -------- ----------
              slug     khaaaaan
              hearts   31
             -------- ----------

 Также переменная $io будет иметь кучу других методов: интерактивные вопросы, прогресс бар и т.д.

MakerBundle помогает  легче создавать консольные команды.


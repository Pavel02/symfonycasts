Creating an Entity Class

Доктрина это ORM (object relational mapper).  объектно-реляционное отображение.
 ORM — технология программирования, которая связывает базы данных с концепциями объектно-ориентированных языков программирования, создавая «виртуальную объектную базу данных».
 Идея в том, что каждая таблица в БД будет иметь соответствующий класс в нашем коде.
 Класс можно вручную, а можно сгенерить

*** Generating with make:entity ***
 MakerBundle из прошлого модуля предоставляет нам  make:entity.

 Entity (Сущность)- "по факту это обычный PHP класс, который можно сохранить в БД ".

 Консольная команда
        bin/console make:entity
   Далее целый интерактив в процессе которого создается класс Article со свойствами
                         Class name of the entity to create or update (e.g. GentleJellybean):
                         > Article

                         created: src/Entity/Article.php
                         created: src/Repository/ArticleRepository.php

                         Entity generated! Now let's add some fields!
                         You can always add more fields later manually or by re-running this command.

                         New property name (press <return> to stop adding fields):
                         > title

                         Field type (enter ? to see all types) [string]:
                         > ?

                        Main types
                          * string
                          * text
                          * boolean
                          * integer (or smallint, bigint)
                          * float

                        Relationships / Associations
                          * relation (a wizard 🧙 will help you build the relation)
                          * ManyToOne
                          * OneToMany
                          * ManyToMany
                          * OneToOne

                        Array/Object Types
                          * array (or simple_array)
                          * json
                          * object
                          * binary
                          * blob

                        Date/Time Types
                          * datetime (or datetime_immutable)
                          * datetimetz (or datetimetz_immutable)
                          * date (or date_immutable)
                          * time (or time_immutable)
                          * dateinterval

                        Other Types
                          * json_array
                          * decimal
                          * guid


                         Field type (enter ? to see all types) [string]:
                         > string

                         Field length [255]:
                         >

                         Can this field be null in the database (nullable) (yes/no) [no]:
                         > no

                         updated: src/Entity/Article.php

                         Add another property? Enter the property name (or press <return> to stop adding fields):
                         > slug

                         Field type (enter ? to see all types) [string]:
                         >

                         Field length [255]:
                         > 100

                         Can this field be null in the database (nullable) (yes/no) [no]:
                         >

                         updated: src/Entity/Article.php

                         Add another property? Enter the property name (or press <return> to stop adding fields):
                         > context

                         Field type (enter ? to see all types) [string]:
                         > text

                         Can this field be null in the database (nullable) (yes/no) [no]:
                         > yes

                         updated: src/Entity/Article.php

                         Add another property? Enter the property name (or press <return> to stop adding fields):
                         > publishedAt

                         Field type (enter ? to see all types) [datetime]:
                         >

                         Can this field be null in the database (nullable) (yes/no) [no]:
                         > yes

                         updated: src/Entity/Article.php

                         Add another property? Enter the property name (or press <return> to stop adding fields):
                         >



                          Success!


                         Next: When you're ready, create a migration with make:migration

В результате выполнения консольной команды было создано 2 класса ArticleRepository  и  Article
  Article это обычный класс с привантными свойствами   id, title, slug, content, and publishedAt

  Назначение этого класса указано в анотации, которая сообщает Доктрине, что это сущность, которая должна быть отображена в БД
                /**
                 * @ORM\Entity(repositoryClass="App\Repository\ArticleRepository")
                 */
                class Article
                {
 Над каждым свойствам также есть анотации, помогают Доктрине знать, как сохранять их в столбцы
                    /**
                     * @ORM\Id()
                     * @ORM\GeneratedValue()
                     * @ORM\Column(type="integer")
                     */
                    private $id;
 Ну и так как свойства приватные, то для них сгенерированы сетеры гетеры
            public function getSlug(): ?string
            {
                return $this->slug;
            }
            public function setSlug(string $slug): self
            {
                $this->slug = $slug;
                return $this;
            }











Updating an Entity

У статей есть лайки ввиде сердец, но пока что это рандом.
 При нажатии на сердце пост запрос идет и выполняется вот этот экшн.
                /**
                 * @Route("/news/{slug}/heart", name="article_toggle_heart", methods={"POST"})
                 */
                public function toggleArticleHeart(LoggerInterface $logger)
                {
                    // TODO actually heart/unheart the article

                    $logger->info('Article is being hearted!');

                    return new JsonResponse(['hearts' => rand(5, 100)]);
                }

***  Updating the heartCount ***
 В экшн выше будем для вызова сервиса использовать  shortcut,   за место  slug   передадим  Arcticle $article
  (до этого использовался slug  для получения объекта Article)
  Теперь благодаря тайп-хинтингу  Symfony  автоматически попытается найти Article  для соответствующего  slug.

  Обновим свойство, имеющегося  Article
                        $article->setHeartCount($article->getHeartCount() + 1);

 Для сохранения объекта в БД, передададим зависимостью      EntityManagerInterface $em
  и сделаем         $em->flush();

  т.е. фрагмент кода примет вид
                            $article->setHeartCount($article->getHeartCount() + 1);
                            $em->flush();

 Здесь не нужен   $em->persist();
  Доктрина, сама поймет, что объект нужно обновить.


*** Smarter Entity Method  ***
 Сейчас в коде контроллера происходит инкримент кол-ва лайков.
  Но лучше конечно вынести этот код.
   Обычно для этого создаем новый класс Сервис и помещаем в него логику.
    Но если логика простая, то можем поместить непосредственно в класс сущности  Article

  В классе  Article
                    public function incrementHeartCount(): self
                    {
                        $this->heartCount = $this->heartCount + 1;

                        return $this;
                    }
  И теперь в ArticleController
                    public function toggleArticleHeart(Article $article, LoggerInterface $logger, EntityManagerInterface $em)
                    {
                        $article->incrementHeartCount();
                        $em->flush();
                        ........................


*** Smart Versus Anemic Entities ***



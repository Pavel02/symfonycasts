Saving Entities
 Здесь пока что не будем создавать настояющую форму для новой статьи.
  просто для примера сделаем сохранение новой фиктивной статьи в БД.

Создаем новый контроллер    src/Controller/ArticleAdminController.php
            <?php

            namespace App\Controller;


            use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
            use Symfony\Component\HttpFoundation\Response;
            use Symfony\Component\Routing\Annotation\Route;

            class ArticleAdminController extends AbstractController
            {
                /**
                 * @Route("/admin/article/new")
                 */
                public function new()
                {
                    return new Response('space rocks... include comets, asteroids & meteoroids');
                }
            }
Можем проверить его работоспособность, перейдя по адресу
                    http://127.0.0.1:8000/admin/article/new


*** Creating the Article Object ***
 для сохранения даных в БД с помощью Doctrine, то создаем объект нужной Entity и просто указываем Doctrine сохранить его в БД

 Создаем объект нужно класса Entity и устанавливаем значения в свойства.
                 /**
                 * @Route("/admin/article/new")
                 */
                public function new()
                {
                    $article = new Article();
                    $article->setTitle('Why Asteroids Taste Like Bacon')
                        ->setSlug('why-asteroids-taste-like-bacon-'.rand(100, 999))
                        ->setContent(<<<EOF
            Spicy **jalapeno bacon**
            .............................................
            eye adipisicing. Pig hamburger pork belly enim. Do porchetta minim capicola irure pancetta chuck
            fugiat.
            EOF
                );

                    // publish most articles
                    if (rand(1, 10) > 2) {
                        $article->setPublishedAt(new \DateTime(sprintf('-%d days', rand(1, 100))));
                    }

                    return new Response('space rocks... include comets, asteroids & meteoroids');
                }


*** Saving the Article ***
  Для сохранения данных в таблицу воспользуемся EntityManagerInterface
   Для этого передадим его зависимость в экшн контролера
            public function new(EntityManagerInterface $em) {....}

   И теперь сохранение данных в Таблицу делается в 2 этапа
                            $em->persist($article);
                            $em->flush();

   ->persist  говорит, что вы хотели бы сохранить данные в таблицу.
   ->flush    уже  выполняет INSERT query

 2 этапа сделаны для гибкости. например, вначале создается 10 статей и передается в ->persist()  а в конце один единственный раз делается ->flush()

 И в самом конце сформируем ответ класса Response()
                            return new Response(sprintf(
                                'Hiya! New Article id: #%d slug: %s',
                                $article->getId(),
                                $article->getSlug()
                            ));

 В результате теперь, если мы снова обратимся по этому URL   http://127.0.0.1:8000/admin/article/new
  то у нас произойдет сохранение статьи в таблицу. а браузер выведет, например такой ответ:
                Hiya! New Article id: #1 slug: why-asteroids-taste-like-bacon-160


 К нашей БД можно выполнять SQL запросы с помощью Doctrine  напрямую из консоли
                    php bin/console doctrine:query:sql "SELECT * FROM article"
  в результате в консоли распечатается массив полученного ответа












Query Logic Re-use & Shortcuts

Хорошей возможностью является повторное использование имеющейся логики запросов.
 Например в файле    /src/Repository/ArticleRepository.php   есть метод
                                     public function findAllPublishedOrderedByNewest()
                                        {
                                            return $this->createQueryBuilder('a')
                                                ->andWhere('a.publishedAt IS NOT NULL')
                                                ->orderBy('a.publishedAt', 'DESC')
                                                ->getQuery()
                                                ->getResult();
                                        }
 Разделим его на 2  начнем с того, что лгику вынесем в  приватный метод.
                        private function addIsPublishedQueryBuilder(QueryBuilder $db)
                        {
                            return $db->andWhere('a.publishiedAt IS NOT NULL');
                        }
  И тогда основной метод примет вид
                        public function findAllPublishedOrderedByNewest()
                        {
                            $qb = $this->createQueryBuilder('a');

                            return $this->addIsPublishedQueryBuilder($qb)
                                ->orderBy('a.publishedAt', 'DESC')
                                ->getQuery()
                                ->getResult();
                        }
 ВАЖНО, чтобы алиас везде был одинаковый (в этом случае 'a')

 Если идти далее, то полезным окажется приватный метод
                        private function getOrCreateQueryBuilder(QueryBuilder $qb = null)
                        {
                            return $qb ?: $this->createQueryBuilder('a');
                        }
  Создастся Билдер и вернется, если его еще не было.
   Сразу же начнем использовать это. Метод выше примет вид.
                private function addIsPublishedQueryBuilder(QueryBuilder $qb = null)
                {
                    return $this->getOrCreateQueryBuilder($qb)
                        ->andWhere('a.publishiedAt IS NOT NULL');
                }
  И другой метод выше так же упрощается
                        public function findAllPublishedOrderedByNewest()
                        {
                            return $this->addIsPublishedQueryBuilder()
                                ->orderBy('a.publishedAt', 'DESC')
                                ->getQuery()
                                ->getResult();
                        }

 В классе Репозитории сейчас есть публичный метод для получения данных, и несколько приватныъ, которые
  помогают создавать запросы.


*** ParamConverter: Automatically Querying ***
 Метод для отображения статьи можем упростить
                  /**
                     * @Route("/news/{slug}", name="article_show")
                     */
                    public function show(Article $article, SlackClient $slack)
                    {
                        if ($article->getSlug() === 'khaaaaaan') {
                            $slack->sendMessage('Kahn', 'Ah, Kirk, my old friend...');
                        }

                        $comments = [
                            'I ate a normal rock once. It did NOT taste like bacon!',
                            'Woohoo! I\'m going on an all-asteroid diet!',
                            'I like bacon too! Buy some from my site! bakinsomebacon.com',
                        ];

                        $html = $this->render('article/show.html.twig', [
                            'article' => $article,
                            'comments' => $comments,
                        ]);

                        return new Response($html);
                    }
Здесь тайп-хинт Article  это сущность для БД и   Symfony автоматически его запросит.
 создается запрос, где поле slug соответствует значению.
Для автоматического запроса сущностей объектов, требуется зависимостью       sensio/framework-extra-bundle



















